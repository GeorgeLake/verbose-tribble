{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Wrap","styled","div","Primary","Block","Init","Intro","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2MAGMA,EAAKC,IAAOC,IAAR,4FAMJC,EAAQF,IAAOC,IAAR,6GAMPE,EAAQH,IAAOC,IAAV,mVAiBLG,EAAO,kBACT,kBAACD,EAAD,KACE,oCACA,+MACA,4TACA,wIAIAE,EAAQ,kBAEZ,kBAACF,EAAD,KACE,qCACI,wCACJ,4BACI,4BAAI,uBAAGG,KAAK,6HAA+H,uBAAGA,KAAK,4HAAR,6HAC3I,4BAAI,uBAAGA,KAAK,sEAAwE,uBAAGA,KAAK,qEAAR,uEAExF,uCACA,6FACA,4BACI,wHACA,2NACA,6EAAkD,4BAC1C,mDACA,uEACA,iEAGR,mKACA,mHAEJ,oDACA,4BACI,sFACA,4GACA,2IACA,iLACA,mKAEJ,mDACA,4BACI,8MAEJ,8CACA,4BACI,mNACA,oGAEJ,8CACA,4BACI,uGACA,sKACA,gLACA,0JAEJ,gEACA,4BACI,2LACA,mGAEJ,2DACA,4BACI,mOACA,+QACA,wPAA6N,4BACrN,gKAIZ,wCACA,0KACA,gGACA,4BACI,0HACA,sGAEJ,6CACA,4BACI,0FAEJ,qDACA,4BACI,4EACA,wHACA,yFACA,mGAEJ,mDACA,4BACI,2LAEJ,kCACA,4BACI,4EACA,wJACA,6EACA,uIAiBOC,MAXf,WACE,OACI,kBAACR,EAAD,KACA,kBAACG,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SChIYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d267c463.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Wrap=styled.div`\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 1em;\n`\n \nconst Primary=styled.div`\n    max-width: 650px;\n    margin: 0 auto;\n    font-family: 'Sen', sans-serif;\n`\n\nconst Block = styled.div`\n  cursor: pointer;\n  background: transparent;\n  font-size: 16px;\n  border-radius: 3px;\n  border: 2px solid darkgray;\n  margin: 0 1em;\n  padding: 0.25em 1em;\n  margin-bottom: 3vh;\n  margin-top: 1vh;\n  transition: 0.5s all ease-out;\n  &:hover {\n    background-color: darkgray;\n    color: white;\n  }\n`;\n\nconst Init = () => (\n    <Block>\n      <h1>init</h1>\n      <p>This is the first blog post of many (hopefully) where I will be recording my progress while taking the EntryLevel Virtual Work Experience under the program associated with Ren.</p>\n      <p>I will to the best of my abilities record all my failures and successes, I hope this is a valuable resource for me to look back on and for others to get value from (I'm sure the people running this may appreciate the blog). This blog will also be a good source of accountability for me</p>\n      <p>This is also my first ever time using yarn or react so if I do something dumb someone please tell me :)</p>\n    </Block>\n)\n\nconst Intro = () => (\n\n  <Block>\n    <h1>Intro</h1>\n        <p>Articles:</p>\n    <ul>\n        <li><a href=\"https://medium.com/blockchain-at-berkeley/introduction-to-blockchain-through-cryptoeconomics-part-1-bitcoin-369f245067f9\"></a><a href=\"https://medium.com/blockchain-at-berkeley/introduction-to-blockchain-through-cryptoeconomics-part-1-bitcoin-369f245067f9\">https://medium.com/blockchain-at-berkeley/introduction-to-blockchain-through-cryptoeconomics-part-1-bitcoin-369f245067f9</a></li>\n        <li><a href=\"https://bitsonblocks.net/2016/10/02/gentle-introduction-ethereum/\"></a><a href=\"https://bitsonblocks.net/2016/10/02/gentle-introduction-ethereum/\">https://bitsonblocks.net/2016/10/02/gentle-introduction-ethereum/</a></li>\n    </ul>\n    <h2>Bitcoin</h2>\n    <p>Bitcoin as a economics experiment (game theory and economics):</p>\n    <ul>\n        <li>Related to fields of: cryptography, game theory, distributed systems, and microeconomics</li>\n        <li>None of the tech was invented by Satoshi, they had existed decades prior to its protocol (protocol is a standard set of rules that allow electronic devices to communicate with each other)</li>\n        <li>Unites Disparate (incomparable/unalike) actors<ol>\n                <li>In trustless system</li>\n                <li>Have incentive to steal from each other</li>\n                <li>Some want to destroy the system</li>\n            </ol>\n        </li>\n        <li>Aligns all these competing incentives to create a single, working, growing, indestructible ledger that remains open and transparent</li>\n        <li>Study of the incentives that secure blockchain systems is known as cryptoeconomics</li>\n    </ul>\n    <p>Transactions and Fees</p>\n    <ul>\n        <li>we must log account balances and transactions (ledger)</li>\n        <li>This database is distributed in a decentralised fashion (distributed ledger)</li>\n        <li>Many computers owned by different parties all trying to come to consensus on the same version of the ledger</li>\n        <li>Asymmetric Key Cryptography: Public (Username), Private (Password). Means owner of bank balance can transact their balance and their balance only</li>\n        <li>Transactions are free but expensive for the network Asymmetry of cost problem: methods of aligning incentives discussed below vvvv</li>\n    </ul>\n    <p>DoS from Transactors</p>\n    <ul>\n        <li>People can flood network in a DoS(Denial of Service) attack by making lots of little purchases to process &rarr; Solution: make transaction fees which compensate the network</li>\n    </ul>\n    <p>Building Blocks</p>\n    <ul>\n        <li>Miners: Aggregate transactions and publish them to the blockchain, are compensated with bitcoin to do so from transaction fees and new Bitcoin minted and agreed to go to the miner</li>\n        <li>new/minted bitcoin in coinbase transaction increases the BTC supply</li>\n    </ul>\n    <p>DoS from Miners</p>\n    <ul>\n        <li>Miner can mint infinite supply with phoney Sybil attack to own accounts</li>\n        <li>equilibrium will be established where average transaction fee and the costs on the network (compute and electricity) will become equal</li>\n        <li>Solution &rarr; make it difficult to include a new block: PoW = Proof of Work (algorithmic puzzles which make it cost to mint new coin) HashCash</li>\n        <li>Solution &rarr; Create trust through severe punishments for misbehaviour and rewards for honest behaviour: Proof of Stake</li>\n    </ul>\n    <p>PoW: Slow down transaction speeds</p>\n    <ul>\n        <li>consensus is easier: limited number of blocks created they have sufficient time to propagate the network before the next is proposed (Bitcoin aims 10 mins)</li>\n        <li>Attacks cost more (compute) than the gains an attacker could make.</li>\n    </ul>\n    <p>Game Theory of Longest Chain</p>\n    <ul>\n        <li>what if two miners solve PoW at the same time? How can everyone agree on same version of blockchain? If you receive a reward for proposing a new block why not ignore blocks found by other miners?</li>\n        <li>Answer &rarr; Mine the longest chain in a majority vote system. It is the longest because it has more resources behind mining it. So if you want a new block reward it is optimal to mine at the top of the longest chain. (Nakamoto Consensus)</li>\n        <li>Blockchain is subjective by nature, if an attacker wants to make a forked ledger they will need to play catch up as they waste compute trying to make the new longest chain, they need 51% of the networks total compute!<ul>\n                <li>if detection of 51% attack happens then the value of currency will tank and the attacker will have control of a useless chain</li>\n            </ul>\n        </li>\n    </ul>\n    <h2>Ethereum</h2>\n    <p>network of computers that ensures data and smart contracts are replicated and processed on all computers on network. Bitcoin + computation.</p>\n    <p>Ethereum Client (geth, eth, pyethapp, mist (Graphical Interface))</p>\n    <ul>\n        <li>a node on network running eth virtual machine and behaves equivalently to all other nodes.</li>\n        <li>Solidity: Smart contract functional smart contract scripting language</li>\n    </ul>\n    <p>PoW &rarr; PoS</p>\n    <ul>\n        <li>Casper (Serenity Release): more energy efficient, faster.</li>\n    </ul>\n    <p>Differences to bitcoin</p>\n    <ul>\n        <li>14 second block time (compared from 10 mins)</li>\n        <li>block size is based on complexity of smart contracts, Gas limit per block which can vary</li>\n        <li>Turing complete distributed decentralised virtual machine</li>\n        <li>linear token issuance (bitcoin halves every 4 years = logarithmic)</li>\n    </ul>\n    <p>Total Supply of Eth:</p>\n    <ul>\n        <li>Pre-mine (crowd sale) + Block rewards (5eth per block mined) + Uncle rewards (block mined late can be referenced later blocks) + Uncle referencing rewards</li>\n    </ul>\n    <p>Gas</p>\n    <ul>\n        <li>pay for calculations done in smart contracts</li>\n        <li>if you want to run contract you send small amount of eth Payment (in ETH) = Gas amount (in Gas) x Gas price (in ETH/Gas)</li>\n        <li>more complex contract = needs more gas to run</li>\n        <li>action for your contract to run on auction, higher gas you set the faster your contract will compute</li>\n    </ul>\n  </Block>\n)\n\n\nfunction App() {\n  return (\n      <Wrap>\n      <Primary>  \n        <Intro/>        \n        <Init/>\n      </Primary>\n      </Wrap>      \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}