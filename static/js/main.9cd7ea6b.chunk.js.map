{"version":3,"sources":["assets/AMMCurve.png","assets/casino.jpg","assets/anatomy.jpg","assets/trade.jpg","App.js","serviceWorker.js","index.js"],"names":["Wrap","styled","div","Primary","Block","Init","Intro","href","SetUp","class","Deploying","Casino","style","flex","width","height","src","assetCasino","PrepEnv","AMM","assetCurve","UniSwap","assetAnatomy","assetTrade","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9cd7ea6b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/AMMCurve.f21c42ee.png\";","export default __webpack_public_path__ + \"static/media/casino.ca96f96e.jpg\";","export default __webpack_public_path__ + \"static/media/anatomy.356cde3d.jpg\";","export default __webpack_public_path__ + \"static/media/trade.3a76b395.jpg\";","import React from 'react';\nimport styled from 'styled-components';\n\nimport assetCurve from './assets/AMMCurve.png';\nimport assetCasino from './assets/casino.jpg';\nimport assetAnatomy from './assets/anatomy.jpg';\nimport assetTrade from './assets/trade.jpg';\n\n\nconst Wrap=styled.div`\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 1em;\n`\n \nconst Primary=styled.div`\n    max-width: 650px;\n    margin: 0 auto;\n    font-family: 'Sen', sans-serif;\n`\n\nconst Block = styled.div`\n  cursor: pointer;\n  background: transparent;\n  font-size: 16px;\n  border-radius: 3px;\n  border: 2px solid darkgray;\n  margin: 0 1em;\n  padding: 0.25em 1em;\n  margin-bottom: 3vh;\n  margin-top: 1vh;\n  word-wrap: break-word;\n  transition: 0.5s all ease-out;\n  &:hover {\n    background-color: darkgray;\n    color: white;\n  }\n`;\n\nconst Init = () => (\n    <Block>\n      <h1>init</h1>\n      <p>This is the first blog post of many (hopefully) where I will be recording my progress while taking the EntryLevel Virtual Work Experience under the program associated with Ren.</p>\n      <p>I will to the best of my abilities record all my failures and successes, I hope this is a valuable resource for me to look back on and for others to get value from (I'm sure the people running this may appreciate the blog). This blog will also be a good source of accountability for me</p>\n      <p>This is also my first ever time using yarn or react so if I do something dumb someone please tell me :)</p>\n    </Block>\n)\n\nconst Intro = () => (\n\n  <Block>\n    <h1>Intro</h1>\n        <p>Articles:</p>\n    <ul>\n        <li><a href=\"https://medium.com/blockchain-at-berkeley/introduction-to-blockchain-through-cryptoeconomics-part-1-bitcoin-369f245067f9\"></a><a href=\"https://medium.com/blockchain-at-berkeley/introduction-to-blockchain-through-cryptoeconomics-part-1-bitcoin-369f245067f9\">https://medium.com/blockchain-at-berkeley/introduction-to-blockchain-through-cryptoeconomics-part-1-bitcoin-369f245067f9</a></li>\n        <li><a href=\"https://bitsonblocks.net/2016/10/02/gentle-introduction-ethereum/\"></a><a href=\"https://bitsonblocks.net/2016/10/02/gentle-introduction-ethereum/\">https://bitsonblocks.net/2016/10/02/gentle-introduction-ethereum/</a></li>\n    </ul>\n    <h2>Bitcoin</h2>\n    <p>Bitcoin as a economics experiment (game theory and economics):</p>\n    <ul>\n        <li>Related to fields of: cryptography, game theory, distributed systems, and microeconomics</li>\n        <li>None of the tech was invented by Satoshi, they had existed decades prior to its protocol (protocol is a standard set of rules that allow electronic devices to communicate with each other)</li>\n        <li>Unites Disparate (incomparable/unalike) actors<ol>\n                <li>In trustless system</li>\n                <li>Have incentive to steal from each other</li>\n                <li>Some want to destroy the system</li>\n            </ol>\n        </li>\n        <li>Aligns all these competing incentives to create a single, working, growing, indestructible ledger that remains open and transparent</li>\n        <li>Study of the incentives that secure blockchain systems is known as cryptoeconomics</li>\n    </ul>\n    <p>Transactions and Fees</p>\n    <ul>\n        <li>we must log account balances and transactions (ledger)</li>\n        <li>This database is distributed in a decentralised fashion (distributed ledger)</li>\n        <li>Many computers owned by different parties all trying to come to consensus on the same version of the ledger</li>\n        <li>Asymmetric Key Cryptography: Public (Username), Private (Password). Means owner of bank balance can transact their balance and their balance only</li>\n        <li>Transactions are free but expensive for the network Asymmetry of cost problem: methods of aligning incentives discussed below vvvv</li>\n    </ul>\n    <p>DoS from Transactors</p>\n    <ul>\n        <li>People can flood network in a DoS(Denial of Service) attack by making lots of little purchases to process &rarr; Solution: make transaction fees which compensate the network</li>\n    </ul>\n    <p>Building Blocks</p>\n    <ul>\n        <li>Miners: Aggregate transactions and publish them to the blockchain, are compensated with bitcoin to do so from transaction fees and new Bitcoin minted and agreed to go to the miner</li>\n        <li>new/minted bitcoin in coinbase transaction increases the BTC supply</li>\n    </ul>\n    <p>DoS from Miners</p>\n    <ul>\n        <li>Miner can mint infinite supply with phoney Sybil attack to own accounts</li>\n        <li>equilibrium will be established where average transaction fee and the costs on the network (compute and electricity) will become equal</li>\n        <li>Solution &rarr; make it difficult to include a new block: PoW = Proof of Work (algorithmic puzzles which make it cost to mint new coin) HashCash</li>\n        <li>Solution &rarr; Create trust through severe punishments for misbehaviour and rewards for honest behaviour: Proof of Stake</li>\n    </ul>\n    <p>PoW: Slow down transaction speeds</p>\n    <ul>\n        <li>consensus is easier: limited number of blocks created they have sufficient time to propagate the network before the next is proposed (Bitcoin aims 10 mins)</li>\n        <li>Attacks cost more (compute) than the gains an attacker could make.</li>\n    </ul>\n    <p>Game Theory of Longest Chain</p>\n    <ul>\n        <li>what if two miners solve PoW at the same time? How can everyone agree on same version of blockchain? If you receive a reward for proposing a new block why not ignore blocks found by other miners?</li>\n        <li>Answer &rarr; Mine the longest chain in a majority vote system. It is the longest because it has more resources behind mining it. So if you want a new block reward it is optimal to mine at the top of the longest chain. (Nakamoto Consensus)</li>\n        <li>Blockchain is subjective by nature, if an attacker wants to make a forked ledger they will need to play catch up as they waste compute trying to make the new longest chain, they need 51% of the networks total compute!<ul>\n                <li>if detection of 51% attack happens then the value of currency will tank and the attacker will have control of a useless chain</li>\n            </ul>\n        </li>\n    </ul>\n    <h2>Ethereum</h2>\n    <p>network of computers that ensures data and smart contracts are replicated and processed on all computers on network. Bitcoin + computation.</p>\n    <p>Ethereum Client (geth, eth, pyethapp, mist (Graphical Interface))</p>\n    <ul>\n        <li>a node on network running eth virtual machine and behaves equivalently to all other nodes.</li>\n        <li>Solidity: Smart contract functional smart contract scripting language</li>\n    </ul>\n    <p>PoW &rarr; PoS</p>\n    <ul>\n        <li>Casper (Serenity Release): more energy efficient, faster.</li>\n    </ul>\n    <p>Differences to bitcoin</p>\n    <ul>\n        <li>14 second block time (compared from 10 mins)</li>\n        <li>block size is based on complexity of smart contracts, Gas limit per block which can vary</li>\n        <li>Turing complete distributed decentralised virtual machine</li>\n        <li>linear token issuance (bitcoin halves every 4 years = logarithmic)</li>\n    </ul>\n    <p>Total Supply of Eth:</p>\n    <ul>\n        <li>Pre-mine (crowd sale) + Block rewards (5eth per block mined) + Uncle rewards (block mined late can be referenced later blocks) + Uncle referencing rewards</li>\n    </ul>\n    <p>Gas</p>\n    <ul>\n        <li>pay for calculations done in smart contracts</li>\n        <li>if you want to run contract you send small amount of eth Payment (in ETH) = Gas amount (in Gas) x Gas price (in ETH/Gas)</li>\n        <li>more complex contract = needs more gas to run</li>\n        <li>action for your contract to run on auction, higher gas you set the faster your contract will compute</li>\n    </ul>\n  </Block>\n)\n\nconst SetUp = () => (\n  <Block>\n    <h1>Setup: Solidity and Smart Contracts</h1>\n    <p>A Simple Solidity Program with setter, getter, and uint</p>\n    <ol><pre><code class=\"language-jsx\">\n      {`// SPDX-License-Identifier: GPL-3.0`}<br/>\n      {`pragma solidity >=0.4.16 <0.9.0; // compiler version`}<br/><br/>\n      {`contract SimpleStorage {`}<br/>\n      {`    uint storedData; // unsigned int 256 bits`}<br/><br/>\n      {`    function set(uint x) public {`}<br/>\n      {`        storedData = x;`}<br/>\n      {`    }`}<br/><br/>\n      {`    function get() public view returns (uint) {`}<br/>\n      {`        return storedData;`}<br/><br/>\n      {`}`}<br/>\n    </code></pre></ol>\n    <p>Data Storage on EVM (Eth Virtual Machine)</p>\n    <ul>\n        <li>storage; which is persistent between function calls and transactions. Costly to read, and even more to initialise and modify storage.</li>\n        <li>memory; of which a contract obtains a freshly cleared instance for each message call. More costly the larger it grows (it scales quadratically).</li>\n        <li>stack; EVM is not a register machine but a stack machine. It has a maximum size of 1024 elements and contains words of 256 bits.</li>\n    </ul>\n    <p>Useful:</p>\n    <ul>\n        <li><a href=\"https://remix.ethereum.org/\"></a><a href=\"https://remix.ethereum.org/\">https://remix.ethereum.org/</a>&nbsp; &nbsp;(quickly write solidity online)</li>\n        <li><a href=\"https://ethereum.org/en/developers/docs/\"></a><a href=\"https://ethereum.org/en/developers/docs/\">https://ethereum.org/en/developers/docs/</a>&nbsp; &nbsp; (open source eth documentation)</li>\n        <li><a href=\"https://docs.soliditylang.org/en/v0.8.1/solidity-by-example.html\"></a><a href=\"https://docs.soliditylang.org/en/v0.8.1/solidity-by-example.html\">https://docs.soliditylang.org/en/v0.8.1/solidity-by-example.html</a>&nbsp; &nbsp; (example solidity code)</li>\n        <li><a href=\"https://docs.soliditylang.org/en/v0.8.1/index.html\"></a><a href=\"https://docs.soliditylang.org/en/v0.8.1/index.html\">https://docs.soliditylang.org/en/v0.8.1/index.html</a>&nbsp; &nbsp; (solidity documentation)</li>\n        <li>commands:<ul>\n                <li>docker run ethereum/solc:stable --help &nbsp; (create docker image, latest version for specific versions replace &quot;stable&quot; with version number)</li>\n                <li>docker run -v /var/folders:/sources ethereum/solc:stable -o /sources/output --abi --bin /sources/Contract.sol &nbsp; &nbsp;(Docker image to compile Solidity files)</li>\n            </ul>\n        </li>\n    </ul>\n    <p>Musings</p>\n    <ul>\n        <li>resource given was for linux and found some errors, to install solidity use: <a href=\"https://docs.soliditylang.org/en/latest/installing-solidity.html#building-from-source\"></a><a href=\"https://docs.soliditylang.org/en/latest/installing-solidity.html#building-from-source\">https://docs.soliditylang.org/en/latest/installing-solidity.html#building-from-source</a></li>\n    </ul>\n  </Block>\n)\n\n\nconst Deploying = () => (\n  <Block>\n    <h1>Deploying Smart Contracts</h1>\n    <p>Thankfully I already had a metamask setup and just needed to connect to the Kovan network, unfortunately the icarus(SMS verification) faucet website was down so I send a request to the gitter faucet instead. While I wait to get Kovan I will use the Ropsten network instead.</p>\n    <p>Reading data on the blockchain does not need any transactions (writing) or fees. Because only modifying the state of the blockchain requires to make a transaction</p>\n    <p>to deploy to network, change environment to injected web3 from JavaScript VM</p>\n    <ul>\n        <li>First ever deployed contract: <a href=\"https://ropsten.etherscan.io/tx/0x232aaec34d3ba372226231e53abb3cba9f01082aa3d761d950b73e04b4a813b5\"></a><a href=\"https://ropsten.etherscan.io/tx/0x232aaec34d3ba372226231e53abb3cba9f01082aa3d761d950b73e04b4a813b5\">https://ropsten.etherscan.io/tx/0x232aaec34d3ba372226231e53abb3cba9f01082aa3d761d950b73e04b4a813b5</a></li>\n        <li>Me modifying the contract: <a href=\"https://ropsten.etherscan.io/tx/0x96f76390478cf13316aa9b55c10bdfd12daaf1f863f790520f17ca97a0c129d9\"></a><a href=\"https://ropsten.etherscan.io/tx/0x96f76390478cf13316aa9b55c10bdfd12daaf1f863f790520f17ca97a0c129d9\">https://ropsten.etherscan.io/tx/0x96f76390478cf13316aa9b55c10bdfd12daaf1f863f790520f17ca97a0c129d9</a></li>\n    </ul>\n    <p>After looking at all the examples I want to write a smart contract that we can gamble our fake eth</p>\n    <p>Useful:</p>\n    <ul>\n        <li><a href=\"https://kovan-testnet.github.io/website/\"></a><a href=\"https://kovan-testnet.github.io/website/\">https://kovan-testnet.github.io/website/</a> (testnet, many useful links including faucets)</li>\n        <li><a href=\"https://ropsten.etherscan.io/\"></a><a href=\"https://ropsten.etherscan.io/\">https://ropsten.etherscan.io/</a>&nbsp; &nbsp; (etherscan in general will be super useful)</li>\n    </ul>\n  </Block>\n)\n\nconst Casino = () => (\n  <Block>\n    <h1>CoinFlip Smart Contract with House Edge</h1>\n    <p>Requirements:</p>\n    <ol>\n        <li>Only the address that deploys contract can withdraw money</li>\n        <li>Be able to pseudorandomly generate a random number</li>\n        <li>Send money to contract and have a chance to receive double (49%) or lose it all</li>\n    </ol>\n    <p>Making this contract I learnt about:</p>\n    <ul>\n        <li>how contracts can have balances and how to interact with sender and owner addresses</li>\n        <li>getting and setting values</li>\n        <li>solidity syntax (if, require, constructor, functions...)</li>\n    </ul>\n    <p>I have deployed my casino with 5eth on the Ropsten network here:</p>\n    <p><a href=\"https://ropsten.etherscan.io/address/0x90313e55139affc3500279458427ca95cbed9edb\"></a><a href=\"https://ropsten.etherscan.io/address/0x90313e55139affc3500279458427ca95cbed9edb\">https://ropsten.etherscan.io/address/0x90313e55139affc3500279458427ca95cbed9edb</a></p>\n    <p>See if you can beat the casino and drain the contract! (I&apos;ll add it to Kovan when I get some keth)</p>\n    <img style={{flex:1 , width: '100%', height: '100%'}} src={assetCasino}></img>\n  </Block>\n)\n\n\n\nconst PrepEnv = () => (\n  <Block>\n    <h1>Preparing Developer Environment</h1>\n    <p>Advantages of being in more focussed environment and be able to make unit tests on own machine. Learn <strong>Truffle (manage development process) and Ganache (local simulated eth environment)</strong></p>\n    <p>Truffle:</p>\n    <ul>\n        <li>truffle init (starts empty truffle project)</li>\n        <li>truffle compile (compile smart contracts)</li>\n        <li>remember: to edit the config uncomment the defaults 🤦&zwj;♂️</li>\n        <li>truffle console (interact with smart contract within terminal)</li>\n        <li>truffle migrate (compile and deploy to network (ganache default))</li>\n        <li>truffle exec scripts/nameOfMyScript.js (write scripts in scripts folder to execute)</li>\n        <li>truffle create &lt;artifact_type&gt; &lt;Name&gt;<ul>\n                <li>artifact_type = (contract|migration|test)</li>\n            </ul>\n        </li>\n    </ul>\n    <p>Ganache:</p>\n    <ul>\n        <li>make sure to quickstart the network</li>\n        <li>explore blocks in the local network</li>\n    </ul>\n  </Block>\n)\n\nconst AMM = () => (\n  <Block>\n    <h1>Automatic Market Makers XY=k</h1>\n    <p>Concept behind popular DeFI application Uniswap</p>\n    <p><a href=\"https://www.gemini.com/cryptopedia/amm-what-are-automated-market-makers\"></a><a href=\"https://www.gemini.com/cryptopedia/amm-what-are-automated-market-makers\">https://www.gemini.com/cryptopedia/amm-what-are-automated-market-makers</a></p>\n    <p>What are Automated Market Makers (AMM)?</p>\n    <ul>\n        <li>digital assets traded in permissionless and automatic (DeFi) way by using liquidity pools rather than a traditional market of buyers and sellers</li>\n        <li>no one entity controls, open participation, build onto of another</li>\n        <li>algorithmic market not inefficient human one (slow price updates and linear space)</li>\n    </ul>\n    <p>Liquidity Pools and Liquidity Providers</p>\n    <ul>\n        <li>liquidity is how easy you can convert asset into another asset.</li>\n        <li>liquidity problem: number of buyers and sellers can be small, difficult to find people to trade on regular basis</li>\n        <li>more assets in a pool and the more liquidity the pool has, the easier trading becomes</li>\n        <li>instead of trading between buyers and sellers (traditional), users trade against a pool of tokens &mdash; a liquidity pool (shared pot of tokens)<ul>\n                <li>Traditional: Buyer bids MAX price to buy for, Seller asks for MIN price to sell for. Trade happens when bids &gt; min asks</li>\n            </ul>\n        </li>\n        <li>Supply liquidity t pools with tokens and price of token is determined by mathematical formula, different formulas for different purposes</li>\n        <li>Liquidity providers earn a fee for providing tokens paid by traders who interact with pool, can also earn yield (yield farming)</li>\n    </ul>\n    <p>Constant Product Formula</p>\n    <ul>\n        <li>Mathematical formula for AMM can take multiple forms, one proposed by Vitalik is: tokenA_balance(p) * tokenB_balance(p) = k &nbsp; &nbsp;also written as: x * y = k (curve of uniswap)</li>\n        <li>k is constant so there is a constant balance of assets that determines the price of tokens in a liquidity pool<ul>\n                <li>simple microeconomics: high demand = less supply = higher price of asset (inverse is true)</li>\n            </ul>\n        </li>\n        <li>there will eventually be a return to a state of balance that reflects a relatively accurate market price (no matter volatility)</li>\n        <li>arbitrage opportunities will ensure market price across exchanges is also accurate</li>\n    </ul>\n    <p>Variations in AMM</p>\n    <ul>\n        <li>Uniswap (Standard): Pair ERC-20 tokens with 50/50 ratio</li>\n        <li>Curve (Specialised): liquidity pools of similar assets (e.g. stablecoins), as a result offers low rates and efficient trades</li>\n        <li>Balancer (Flexible): Expand on Uniswap allowing users to create dynamic liquidity pools of up to 8 assets in any ratio</li>\n    </ul>\n    <p><a href=\"https://web.stanford.edu/~guillean/talks/defi-2020.pdf\"></a><a href=\"https://web.stanford.edu/~guillean/talks/defi-2020.pdf\">https://web.stanford.edu/~guillean/talks/defi-2020.pdf</a></p>\n    <p>Trading Set</p>\n    <ul>\n        <li>constant price markets (Uniswap) have concave hyperbola of reserves possible (our set)</li>\n        <li>no rational trader would trade to the right of the set, many trade functions reveal same set</li>\n        <li>makes arbitrage easy and therefore prices are more accurate externally</li>\n    </ul>\n    <p><a href=\"https://uniswap.org/whitepaper.pdf\"></a><a href=\"https://uniswap.org/whitepaper.pdf\">https://uniswap.org/whitepaper.pdf</a></p>\n    <p>UniSwap WhitePaper</p>\n    <ul>\n        <li>v1: ETH is bridge currency, every pair includes ETH as an asset, makes routing simpler.</li>\n        <li>All liquidity providers therefore have exposure to ETH and suffer loss based on changes of other assets relative to ETH</li>\n        <li>v1: using ETH as a bridge means that traders have to pay twice gas fees as they would to go from ABC/XYZ pair. (ABC/ETH &rarr; ETH/XYZ) also suffer slippage twice</li>\n        <li>v2: create any pair of ERC-20, routing can be handled at higher layer</li>\n        <li>ETH is different from standard interface for interacting with ERC-20 tokens, as result many other protocols on Ethereum don&apos;t support ETH instead using canonical Wrapped ETH token WETH.<ul>\n                <li>ETH must be wrapped into WETH before it can be traded on v2</li>\n            </ul>\n        </li>\n    </ul>\n    <img src={assetCurve}></img>\n  </Block>\n)\n\nconst UniSwap = () => (\n  <Block>\n    <h1>UniSwap</h1>\n    <p>These images were very useful for my understanding (ontop of playing with the interface):</p>\n    <img style={{flex:1 , width: '100%', height: '100%'}} src={assetAnatomy}></img>\n    <img style={{flex:1 , width: '100%', height: '100%'}} src={assetTrade}></img>\n    <p>view my transactions here: <a href=\"https://ropsten.etherscan.io/address/0x4062Da349E622963D8A784F5A00e394D6d79c330\"></a><a href=\"https://ropsten.etherscan.io/address/0x4062Da349E622963D8A784F5A00e394D6d79c330\">https://ropsten.etherscan.io/address/0x4062Da349E622963D8A784F5A00e394D6d79c330</a></p>\n  </Block>\n)\n\n\nfunction App() {\n  return (\n      <Wrap>\n      <Primary>\n        <UniSwap/>\n        <AMM/>\n        <PrepEnv/>\n        <Casino/>\n        <Deploying/>\n        <SetUp/> \n        <Intro/>\n        <Init/>\n      </Primary>\n      </Wrap>      \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}